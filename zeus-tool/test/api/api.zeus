package bot.api;

import "google/protobuf/any.proto";

@resource("/api/user")
service  User{
    @post("/login")
    login(LoginReq) LoginResp;
    @get("/current")
    currentUser() CurrentUserResp;
    @post("/logout")
    logout();

    @get("list")
    @middleware(auth.RequireRole(model.RoleTypeAdmin))
    list(ListUserReq) ListUserResp;

    @post("update")
    @middleware(auth.RequireRole(model.RoleTypeAdmin))
    update(UpdateUserReq);

    @post("add")
    @middleware(auth.RequireRole(model.RoleTypeAdmin))
    add(AddUserReq);

    @post("delete")
    @middleware(auth.RequireRole(model.RoleTypeAdmin))
    delete(DeleteUserReq);
}

@middleware(auth.RequireRole(model.RoleTypeDev))
@resource("/api/bot")
service  Bot{
    @get("/list")
    list(ListBotReq) ListBotResp;

    @get("/detail")
    detail(BotDetailReq) BotDetailResp;

    @post("/add")
    add(AddBotReq);

    @post("/delete")
    delete(DeleteBotReq);

    @post("/update")
    update(UpdateBotReq);

    @post("/updateDev")
    updateDev(UpdateBotDevReq);
}

@middleware(auth.RequireLogin)
@resource("/api/exchange")
service  Exchange{
    @get("/list")
    list(ListExchangeReq) ListExchangeResp;

    @post("/add")
    add(AddExchangeReq);

    @post("/delete")
    delete(DeleteExchangeReq);

    @post("/update")
    update(UpdateExchangeReq);

    @get("/names")
    nameList() NameListResp;

    @get("all")
    all() AllExchangeResp;
}

@middleware(auth.RequireLogin)
@resource("/api/market")
service  Market{
    @get("/list")
    list(ListMarketReq) ListMarketResp;
}

@middleware(auth.RequireLogin)
@resource("/api/host")
service Host{
    @post("/add")
    add(AddHostReq);

    @get("/list")
    list(ListHostReq) ListHostResp;

    @post("/delete")
    delete(DeleteHostReq);

    @get("detail")
    detail(HostDetailReq) HostDetailResp;

    @post("event")
    event(HostEventReq);

    @get("logs")
    logs(HostLogReq) HostLogResp;

    @get("chart")
    chart(HostChartReq) HostChartResp;
}

message LoginResp{
    int64 id;
    string user;
    string role;
}

message LoginReq{
    @tag(validator="required")
    string user;
    @tag(validator="required")
    string pass;
}

message CurrentUserResp {
    int64 id;
    string user;
    string avatar;
    string role;
}

message ListBotReq {
    @tag(validator="required")
    int32 current;
    @tag(validator="required,lte=20")
    int32 pageSize;
    int64 id;
    string name;
    int32 botType;
}

message ListBotResp {
    message Item {
        int64 id;
        string name;
        int32 botType;
        string version;
        int32 updateTime;
    }
    bool success;
    int32 total;
    int32 current;
    int32 pageSize;
    repeated Item data;
}

message AddBotReq {
    string name;
    int32 botType;
}

message ListUserReq {
    @tag(validator="required")
    int32 current;
    @tag(validator="required,lte=20")
    int32 pageSize;
    int64 id;
    string user;
    string role;
}

message ListUserResp {
    message Item {
        int64 id;
        string user;
        string role;
        int32 lastLogin;
        int32 createTime;
    }
    bool success;
    int32 total;
    int32 current;
    int32 pageSize;
    repeated Item data;
}

message UpdateUserReq {
    int64 id;
    string user;
    string pass;
    string role;
}

message AddUserReq {
    string user;
    string pass;
    string role;
}

message DeleteUserReq {
    int64 id;
}

message DeleteBotReq {
    int64 id;
}

message UpdateBotReq {
    int64 id;
    string name;
    int32 botType;
}

message ListExchangeReq {
    @tag(validator="required")
    int32 current;
    @tag(validator="required,lte=20")
    int32 pageSize;
    int64 id;
    string alias;
    string name;
    string key;
}

message ListExchangeResp {
    message Item {
        int64 id;
        string alias;
        string name;
        string key;
        string secret;
        string pass;
        int32 updateTime;
    }
    bool success;
    int32 total;
    int32 current;
    int32 pageSize;
    repeated Item data;
}

message AddExchangeReq {
    @tag(validator="required")
    string alias;
    @tag(validator="required")
    string name;
    @tag(validator="required")
    string key;
    @tag(validator="required")
    string secret;
    string pass;
}

message DeleteExchangeReq {
    int64 id;
}

message UpdateExchangeReq {
    @tag(validator="required")
    int64 id;
    @tag(validator="required")
    string alias;
    @tag(validator="required")
    string name;
    @tag(validator="required")
    string key;
    @tag(validator="required")
    string secret;
    string pass;
}

message NameListResp {
    message Item {
        string label;
        string name;
    }
    repeated Item data;
}

message BotDetailReq {
     @tag(validator="required")
     int64 id;
}

message BotDetailResp {
     int64 id;
     string name;
     int32 botType;
     string code;
     string setting;
     string chart;
     string version;
     int32 updateTime;
}

message UpdateBotDevReq {
     int64 id;
     string code;
     string setting;
     string chart;
}

message AllExchangeResp {
     message Item {
        int64 id;
        string alias;
     }
     repeated Item data;
}

message ListMarketReq {
     @tag(validator="required")
     int32 current;
     @tag(validator="required,lte=20")
     int32 pageSize;
     int64 id;
     string name;
     string developer;
}

message ListMarketResp {
     message Item {
         int64 id;
         string name;
         string developer;
         string version;
         int32 releaseTime;
     }
     bool success;
     int32 total;
     int32 current;
     int32 pageSize;
     repeated Item data;
}

message AddHostReq {
    string name;
    int64 botId;
}

message ListHostReq {
     @tag(validator="required")
     int32 current;
     @tag(validator="required,lte=20")
     int32 pageSize;
     int64 id;
     string name;
}

message ListHostResp {
     message Item {
         int64 id;
         string name;
         string botName;
         string botVersion;
         string status;
         int32 startTime;
     }
     bool success;
     int32 total;
     int32 current;
     int32 pageSize;
     repeated Item data;
}

message DeleteHostReq {
    int64 id;
}

message HostDetailReq {
    int64 id;
}


message HostDetailResp {
     int64 id;
     string name;
     string botName;
     string botVersion;
     string status;
     int32 startTime;
     string chart;
     string settingSchema;
     string config;
}

message HostEventReq {
    message Item {
        string name;
        string params;
    }
    int64 id ;
    repeated Item events;
}

message HostLogReq {
    @tag(validator="required")
    int32 pageIndex;
    @tag(validator="required,lte=20")
    int32 pageSize;
    int64 hostId;
    int32 startTime;
    int32 endTime;
    string tag;
    string level;
}

message HostLogResp {
 message Item {
        string level;
        string tag;
        string value;
        string text;
        int32  time;
    }
    repeated Item data;
}

message HostChartReq {
    int64 hostId;
    string name;
    int32 startTime;
    int32 endTime;
    int32 limit;
}

message HostChartResp {
    @tag(customtype="[]map[string]interface{}",nullable=false)
    bytes data;
}